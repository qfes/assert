% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert-soft.R
\name{warn_if_not}
\alias{warn_if_not}
\alias{warn_if}
\title{Assert (soft)}
\usage{
warn_if_not(
  expr,
  warn_message = NULL,
  warn_class = NULL,
  call = rlang::caller_call(),
  env = rlang::caller_env(),
  print_expr = NULL,
  ...
)

warn_if(
  expr,
  warn_message = NULL,
  warn_class = NULL,
  call = rlang::caller_call(),
  env = rlang::caller_env(2L),
  print_expr = NULL,
  ...
)
}
\arguments{
\item{expr}{<\code{expression}> a logical expression to test.}

\item{warn_message}{<\code{string}> a message to be displayed when assertion fails.}

\item{warn_class}{<\code{character}> the class name/s for the warning.}

\item{call}{The execution environment of a currently running
function, e.g. \code{call = caller_env()}. The corresponding function
call is retrieved and mentioned in error messages as the source
of the error.

You only need to supply \code{call} when throwing a condition from a
helper function which wouldn't be relevant to mention in the
message.

Can also be \code{NULL} or a \link[rlang:topic-defuse]{defused function call} to
respectively not display any call or hard-code a code to display.}

\item{env}{<\code{environment}> the environment for substituted \code{dots} and \code{print_expr}.
Has no effect if \code{dots} and \code{print_expr} are already quosures.}

\item{print_expr}{<\code{expression}> a diffused expression for altering the error message.
Defaults to \code{rlang::as_quosure(substitute(expr), rlang::caller_env())}}

\item{...}{<\code{any}> values used in evaluating glue expressions, for the error message.}
}
\description{
Raises an assertion warning when \code{any(expr)} is false.

Raises an assertion warning when \code{all(expr)} is true.
}
